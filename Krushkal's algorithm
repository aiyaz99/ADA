#include <stdio.h>
#include <stdlib.h>

#define MAX_EDGES 100
#define MAX_VERTICES 100

// Structure to represent an edge
typedef struct {
    int src, dest, weight;
} Edge;

// Structure to represent a subset for union-find
typedef struct {
    int parent, rank;
} Subset;

// Function to find the subset of an element
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function to perform union of two subsets
void unionSets(Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);
    
    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// Comparison function for sorting edges by weight
int compareEdges(const void* a, const void* b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

// Function to find MST using Kruskal's algorithm
void kruskalMST(Edge edges[], int vertices, int edgesCount) {
    qsort(edges, edgesCount, sizeof(Edge), compareEdges);
    
    Subset subsets[MAX_VERTICES];
    for (int v = 0; v < vertices; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    
    Edge result[MAX_VERTICES];
    int e = 0, i = 0;
    int totalCost = 0;
    
    while (e < vertices - 1 && i < edgesCount) {
        Edge nextEdge = edges[i++];
        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);
        
        if (x != y) {
            result[e++] = nextEdge;
            unionSets(subsets, x, y);
            totalCost += nextEdge.weight;
        }
    }
    
    printf("\nMinimum Spanning Tree:\n");
    printf("Edge \tWeight\n");
    for (int j = 0; j < e; j++) {
        printf("%d - %d \t%d\n", result[j].src, result[j].dest, result[j].weight);
    }
    printf("Total Minimum Cost: %d\n", totalCost);
}

int main() {
    int vertices, edgesCount;
    Edge edges[MAX_EDGES];
    
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    
    printf("Enter the number of edges: ");
    scanf("%d", &edgesCount);
    
    printf("Enter the edges (source destination weight):\n");
    for (int i = 0; i < edgesCount; i++) {
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }
    
    kruskalMST(edges, vertices, edgesCount);
    
    return 0;
}
